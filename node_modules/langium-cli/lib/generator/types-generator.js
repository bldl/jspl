import { CompositeGeneratorNode, NL, toString } from 'langium';
import { collectAst } from 'langium/types';
import { LangiumGrammarGrammar } from 'langium/internal';
import { collectKeywords } from './util.js';
export function generateTypesFile(services, grammars) {
    const { unions, interfaces } = collectAst(grammars, services.shared.workspace.LangiumDocuments);
    const reservedWords = new Set(collectKeywords(LangiumGrammarGrammar()));
    const fileNode = new CompositeGeneratorNode();
    unions.forEach(union => fileNode.append(union.toDeclaredTypesString(reservedWords)).append(NL));
    interfaces.forEach(iFace => fileNode.append(iFace.toDeclaredTypesString(reservedWords)).append(NL));
    return toString(fileNode);
}
//# sourceMappingURL=types-generator.js.map