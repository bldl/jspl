digraph G {
	typeofArray [shape=oval, color=black];
	typeofNan [shape=oval, color=black];
	zeroTripleEqualsNegativZero [shape=oval, color=black];
	zeroObjectIsNegativeZero [shape=oval, color=black];
	arrayWithNegativeZeroIncludesZero [shape=oval, color=black];
	nanTripleEqualsNan [shape=oval, color=black];
	nanObjectIsNan [shape=oval, color=black];
	arrayWithNanIncludesNan [shape=oval, color=black];
	arrayWithZeroTripleEqualsArrayWithZero [shape=oval, color=black];
	tupleWithZeroTripleEqualsTupleWithZero [shape=oval, color=black];
	objectIsFrozenTupleWithZero [shape=oval, color=black];
	storeNegativeZero [shape=oval, color=black];
	zerosAreTripleEqual [shape=oval, color=black];
		storeNegativeZero -> zerosAreTripleEqual [labelfontcolor="#ffba08", color="#ffba08"];
		storeNegativeZero -> zerosAreTripleEqual [labelfontcolor="#ffba08", color="#ffba08"];
		storeNegativeZero -> zerosAreTripleEqual [labelfontcolor="#ffba08", color="#ffba08"];
	tupleNaNAreTripleEqual [shape=oval, color=black];
	tupleWithZeroObjectIsTupleWithNegativeZero [shape=oval, color=black];
		storeNegativeZero -> tupleWithZeroObjectIsTupleWithNegativeZero [labelfontcolor="#ffba08", color="#ffba08"];
		typeofTuple -> tupleWithZeroObjectIsTupleWithNegativeZero [labelfontcolor="#ffba08", color="#ffba08"];
		zerosAreTripleEqual -> tupleWithZeroObjectIsTupleWithNegativeZero [labelfontcolor="#ffba08", color="#ffba08"];
		storeNegativeZero -> tupleWithZeroObjectIsTupleWithNegativeZero [labelfontcolor="#ffba08", color="#ffba08"];
	tupleWithNanObjectIsTupleWithNan [shape=oval, color=black];
		tupleNaNAreTripleEqual -> tupleWithNanObjectIsTupleWithNan [labelfontcolor="#ffba08", color="#ffba08"];
	typeofTuple [shape=oval, color=black];
		typeOfTupleWithBox -> typeofTuple [labelfontcolor="#ffba08", color="#ffba08"];
		typeofBoxConstructor -> typeofTuple [labelfontcolor="#ffba08", color="#ffba08"];
		typeOfTupleWithBox -> typeofTuple [labelfontcolor="#ffba08", color="#ffba08"];
		typeofBoxConstructor -> typeofTuple [labelfontcolor="#ffba08", color="#ffba08"];
	tupleWrappedInObjectTripleEqualsTuple [shape=oval, color=black];
		typeofTuple -> tupleWrappedInObjectTripleEqualsTuple [labelfontcolor="#ffba08", color="#ffba08"];
		typeofTuple -> tupleWrappedInObjectTripleEqualsTuple [labelfontcolor="#ffba08", color="#ffba08"];
	addingTupleToWeakSetThrows [shape=oval, color=black];
		typeofTuple -> addingTupleToWeakSetThrows [labelfontcolor="#ffba08", color="#ffba08"];
	tupleAsArgumentOfNewProxyThrows [shape=oval, color=black];
		typeofTuple -> tupleAsArgumentOfNewProxyThrows [labelfontcolor="#ffba08", color="#ffba08"];
	typeofBoxConstructor [shape=oval, color=black];
	typeofBoxInstance [shape=oval, color=black];
		noBox -> typeofBoxInstance [labelfontcolor="#9d0208", color="#9d0208"];
	typeOfTupleWithBox [shape=oval, color=black];
		typeofTuple -> typeOfTupleWithBox [labelfontcolor="#ffba08", color="#ffba08"];
		typeofBoxInstance -> typeOfTupleWithBox [labelfontcolor="#ffba08", color="#ffba08"];
		noBox -> typeOfTupleWithBox [labelfontcolor="#9d0208", color="#9d0208"];
	boxConstructorWithPrimitives [shape=oval, color=black];
		noBox -> boxConstructorWithPrimitives [labelfontcolor="#9d0208", color="#9d0208"];
	addingTuplesWithBoxesToWeakSets [shape=oval, color=black];
		noBox -> addingTuplesWithBoxesToWeakSets [labelfontcolor="#9d0208", color="#9d0208"];
	tupleWithBoxAsArgumentForNewProxy [shape=oval, color=black];
		typeOfTupleWithBox -> tupleWithBoxAsArgumentForNewProxy [labelfontcolor="#ffba08", color="#ffba08"];
		noBox -> tupleWithBoxAsArgumentForNewProxy [labelfontcolor="#9d0208", color="#9d0208"];
	testingThisAndTHAT [shape=oval, color=black];
	testingThisAndTHAT2 [shape=oval, color=black];
	testingThisAndTHAT3 [shape=oval, color=black];
	testForMultipleConcerns [shape=oval, color=black];
}
