concern unequalTupleNan {
	summary
		"consistency change"
	description
		"Currently the only value not equal to itself is NaN, and this can be used as a reliable
		check for NaN. If any record or tuple containing a NaN within its tree is also not equal to
		itself, then there would be an infinite number of values not equal to themselves.
		<ul>
			<li>
				<a href=\"https://github.com/tc39/proposal-record-tuple/issues/65\"
					>R&T #65 Equality semantics for -0 and NaN</a
				>
			</li>
		</ul>"
}

concern nanNotIsNan {
	summary
		"Object.is NaN semantics"
	description
		"if both 'Object.is(NaN, NaN)' and '#[NaN] === #[NaN]'' are true, there does not appear to be
		a reason for Object.is(#[NaN], #[NaN]) to not be true."
}


/*
    Tweakables
*/


proposition tupleNaNAreTripleEqual {
    expression "#[NaN] === #[NaN]"
    default value True {}
    value False {
        raise unequalTupleNan
    }
}

proposition tupleWithNanObjectIsTupleWithNan {
    expression "Object.is(#[NaN], #[NaN])"
    default value True {}
    value False {
        raise nanNotIsNan when tupleNaNAreTripleEqual is True
    }
}