digraph G {
	// Conditions:
	noBox [shape=diamond, color="#509e02"];
		typeofBoxConstructor -> noBox [labelfontcolor="#509e02", color="#509e02"];
	// Propositions:
	typeofArray [shape=oval, color="#000000"];
	typeofNan [shape=oval, color="#000000"];
	zeroTripleEqualsNegativZero [shape=oval, color="#000000"];
	zeroObjectIsNegativeZero [shape=oval, color="#000000"];
	arrayWithNegativeZeroIncludesZero [shape=oval, color="#000000"];
	nanTripleEqualsNan [shape=oval, color="#000000"];
	nanObjectIsNan [shape=oval, color="#000000"];
	arrayWithNanIncludesNan [shape=oval, color="#000000"];
	arrayWithZeroTripleEqualsArrayWithZero [shape=oval, color="#000000"];
	tupleWithZeroTripleEqualsTupleWithZero [shape=oval, color="#000000"];
	objectIsFrozenTupleWithZero [shape=oval, color="#000000"];
	storeNegativeZero [shape=oval, color="#000000"];
	zerosAreTripleEqual [shape=oval, color="#000000"];
		storeNegativeZero -> zerosAreTripleEqual [labelfontcolor="#9e7702", color="#9e7702"];
	tupleNaNAreTripleEqual [shape=oval, color="#000000"];
	tupleWithZeroObjectIsTupleWithNegativeZero [shape=oval, color="#000000"];
		storeNegativeZero -> tupleWithZeroObjectIsTupleWithNegativeZero [labelfontcolor="#9e7702", color="#9e7702"];
		typeofTuple -> tupleWithZeroObjectIsTupleWithNegativeZero [labelfontcolor="#9e7702", color="#9e7702"];
		zerosAreTripleEqual -> tupleWithZeroObjectIsTupleWithNegativeZero [labelfontcolor="#9e7702", color="#9e7702"];
	tupleWithNanObjectIsTupleWithNan [shape=oval, color="#000000"];
		tupleNaNAreTripleEqual -> tupleWithNanObjectIsTupleWithNan [labelfontcolor="#9e7702", color="#9e7702"];
	typeofTuple [shape=oval, color="#000000"];
		typeOfTupleWithBox -> typeofTuple [labelfontcolor="#9e7702", color="#9e7702"];
		typeofBoxConstructor -> typeofTuple [labelfontcolor="#9e7702", color="#9e7702"];
	tupleWrappedInObjectTripleEqualsTuple [shape=oval, color="#000000"];
		typeofTuple -> tupleWrappedInObjectTripleEqualsTuple [labelfontcolor="#9e7702", color="#9e7702"];
	addingTupleToWeakSetThrows [shape=oval, color="#000000"];
		typeofTuple -> addingTupleToWeakSetThrows [labelfontcolor="#9e7702", color="#9e7702"];
	tupleAsArgumentOfNewProxyThrows [shape=oval, color="#000000"];
		typeofTuple -> tupleAsArgumentOfNewProxyThrows [labelfontcolor="#9e7702", color="#9e7702"];
	typeofBoxConstructor [shape=oval, color="#000000"];
	typeofBoxInstance [shape=oval, color="#000000"];
		noBox -> typeofBoxInstance [labelfontcolor="#9d0208", color="#9d0208"];
	typeOfTupleWithBox [shape=oval, color="#000000"];
		typeofTuple -> typeOfTupleWithBox [labelfontcolor="#9e7702", color="#9e7702"];
		typeofBoxInstance -> typeOfTupleWithBox [labelfontcolor="#9e7702", color="#9e7702"];
		noBox -> typeOfTupleWithBox [labelfontcolor="#9d0208", color="#9d0208"];
	boxConstructorWithPrimitives [shape=oval, color="#000000"];
		noBox -> boxConstructorWithPrimitives [labelfontcolor="#9d0208", color="#9d0208"];
	addingTuplesWithBoxesToWeakSets [shape=oval, color="#000000"];
		noBox -> addingTuplesWithBoxesToWeakSets [labelfontcolor="#9d0208", color="#9d0208"];
	tupleWithBoxAsArgumentForNewProxy [shape=oval, color="#000000"];
		typeOfTupleWithBox -> tupleWithBoxAsArgumentForNewProxy [labelfontcolor="#9e7702", color="#9e7702"];
		noBox -> tupleWithBoxAsArgumentForNewProxy [labelfontcolor="#9d0208", color="#9d0208"];
}
